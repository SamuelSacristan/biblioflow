services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-biblioflow_ci}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_ci_data:/var/lib/postgresql/data
      - ./database/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-biblioflow_ci}"]
      interval: 5s
      timeout: 3s
      retries: 3

  mongo:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-rootpassword123}
    volumes:
      - mongo_ci_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: ./back
      dockerfile: dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      JWT_SECRET: ${JWT_SECRET:-ci-jwt-secret-key-for-testing}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/biblioflow_ci}
      MONGO_URL: ${MONGO_URL:-mongodb://root:rootpassword123@mongo:27017/biblioflow_logs}
      PORT: ${PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: "no"
    labels:
      - "ci.environment=testing"
      - "ci.service=backend"

  frontend:
    build:
      context: ./front
      dockerfile: dockerfile
    depends_on:
      - backend
    restart: "no"
    labels:
      - "ci.environment=testing"
      - "ci.service=frontend"

volumes:
  postgres_ci_data:
    driver: local
    labels:
      - "ci.data=postgres"
  mongo_ci_data:
    driver: local
    labels:
      - "ci.data=mongo"

networks:
  default:
    driver: bridge
    labels:
      - "ci.network=main"