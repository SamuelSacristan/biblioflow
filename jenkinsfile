pipeline {
    agent any
    
    tools {
        nodejs 'Node_24'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '📥 Récupération du code...'
                checkout scm
                sh 'ls -la'
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        echo '🔧 Installation des dépendances backend...'
                        dir('back') {
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        echo '🔧 Installation des dépendances frontend...'
                        dir('front') {
                            sh 'npm install'
                        }
                    }
                }
            }
        }
        
        stage('Build Applications') {
            parallel {
                stage('Backend Build') {
                    steps {
                        echo '🏗️ Build du backend...'
                        dir('back') {
                            sh 'npm run build'
                            sh 'ls -la dist/'
                        }
                    }
                }
                stage('Frontend Build') {
                    steps {
                        echo '🏗️ Build du frontend...'
                        dir('front') {
                            sh 'npm run build'
                            sh 'ls -la dist/'
                        }
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo '🐳 Construction des images Docker...'
                script {
                    // Build backend image
                    def backendImage = docker.build("biblioflow/backend:${env.BUILD_NUMBER}", "./back")
                    backendImage.tag("biblioflow/backend:latest")
                    
                    // Build frontend image  
                    def frontendImage = docker.build("biblioflow/frontend:${env.BUILD_NUMBER}", "./front")
                    frontendImage.tag("biblioflow/frontend:latest")
                    
                    echo "✅ Images créées avec succès !"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo '🔍 Vérification des images...'
                sh 'docker images | grep biblioflow'
            }
        }
    }
    
    post {
        always {
            echo '🧹 Nettoyage...'
            cleanWs()
        }
        success {
            echo '✅ Pipeline terminé avec succès ! 🎉'
        }
        failure {
            echo '❌ Pipeline échoué ! 😞'
        }
    }
}